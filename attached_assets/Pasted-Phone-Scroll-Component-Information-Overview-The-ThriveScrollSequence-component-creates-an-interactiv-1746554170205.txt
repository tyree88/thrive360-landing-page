Phone Scroll Component Information
Overview
The ThriveScrollSequence component creates an interactive phone mockup that displays different screens as the user scrolls down the page. It uses GSAP animations with ScrollTrigger to create a smooth, scroll-based animation sequence that changes content inside a phone mockup.

Files Structure
The component is organized into several files:

thrive-scroll-sequence.tsx - Main component
scroll-sequence/PhoneMockup.tsx - Phone UI
scroll-sequence/useScrollSequence.tsx - Animation logic hook
scroll-sequence/types.ts - TypeScript interfaces
scroll-sequence/SideContainers.tsx - Optional side UI elements
scroll-sequence/StaticFallback.tsx - Accessible alternative for reduced motion
scroll-sequence/content/ - Content components for each section
Key Components
1. Main Component: ThriveScrollSequence

import React from "react";
import { useScrollSequence } from "./scroll-sequence/useScrollSequence";
import { ThriveScrollSequenceProps } from "./scroll-sequence/types";
import { cn } from "@/lib/utils";
import PhoneMockup from "./scroll-sequence/PhoneMockup";
import SideContainers from "./scroll-sequence/SideContainers";
import StaticFallback from "./scroll-sequence/StaticFallback";

export type { ScrollSequenceSection } from "./scroll-sequence/types";

export const ThriveScrollSequence = ({
  title,
  subtitle,
  sections,
  className,
  showSideContainers = false,
  centerPhone = true,
}: ThriveScrollSequenceProps & {
  showSideContainers?: boolean;
  centerPhone?: boolean;
}) => {
  const { refs, prefersReducedMotion } = useScrollSequence(sections);
  
  // If reduced motion is preferred, render a static version
  if (prefersReducedMotion) {
    return <StaticFallback 
      title={title} 
      subtitle={subtitle} 
      sections={sections} 
      className={className} 
    />;
  }

  return (
    <div 
      ref={refs.containerRef} 
      className={cn("h-[800px] md:h-[1000px] relative overflow-hidden", className)}
    >
      {/* Background layer with color transitions */}
      <div 
        ref={refs.bgRef} 
        className="absolute inset-0 transition-colors duration-300"
        style={{ backgroundColor: sections[0]?.bgColor || 'white' }}
      ></div>

      {/* Container for title and phone mockup with side elements */}
      <div className="relative z-10 container mx-auto h-full flex flex-col items-center justify-center py-10">
        {/* Title section (animates out on scroll) */}
        <div ref={refs.titleRef} className="text-center mb-12">
          <h2 className="text-3xl md:text-5xl font-bold text-gray-900 dark:text-white">{title}</h2>
          {subtitle && <p className="text-xl mt-4 text-gray-700 dark:text-gray-300">{subtitle}</p>}
        </div>

        {/* Main content area with phone mockup and side containers */}
        <div className={cn(
          "relative w-full max-w-6xl flex items-center", 
          centerPhone ? "justify-center" : "justify-between"
        )}>
          {/* Side containers - only shown if showSideContainers is true */}
          {showSideContainers && (
            <SideContainers 
              leftRef={refs.leftContainerRef} 
              rightRef={refs.rightContainerRef} 
            />
          )}

          {/* Phone mockup center */}
          <PhoneMockup
            sections={sections}
            phoneRef={refs.phoneRef}
            contentContainerRef={refs.contentContainerRef}
            sectionRefs={refs.sectionRefs}
          />
        </div>
      </div>
    </div>
  );
};

export default ThriveScrollSequence;
2. Phone Mockup Component: PhoneMockup

import React, { useEffect, useRef } from "react";
import { ScrollSequenceSection } from "./types";
import { Power, Volume1, Volume2 } from "lucide-react";
import { gsap } from "gsap";

interface PhoneMockupProps {
  sections: ScrollSequenceSection[];
  phoneRef: React.RefObject<HTMLDivElement>;
  contentContainerRef: React.RefObject<HTMLDivElement>;
  sectionRefs: React.MutableRefObject<(HTMLDivElement | null)[]>;
}

const PhoneMockup: React.FC<PhoneMockupProps> = ({ 
  sections, 
  phoneRef, 
  contentContainerRef, 
  sectionRefs 
}) => {
  const screenReflectionRef = useRef<HTMLDivElement>(null);
  
  // Add subtle animation effects to the phone and screen reflection
  useEffect(() => {
    const reflection = screenReflectionRef.current;
    
    if (reflection) {
      // Create a subtle animation for the reflection
      gsap.to(reflection, {
        opacity: 0.4,
        duration: 2,
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut"
      });
    }
  }, []);

  return (
    <div 
      ref={phoneRef} 
      className="relative w-72 h-[600px] bg-black rounded-[40px] border-8 border-gray-800 shadow-2xl flex justify-center"
      style={{ 
        transform: "translateZ(0)",  // Hardware acceleration
        willChange: "transform",  // Performance optimization
        boxShadow: "0 10px 30px rgba(0,0,0,0.3), inset 0 2px 0 rgba(255,255,255,0.1)"
      }}
      aria-label="iPhone mockup displaying application screens"
    >
      {/* Phone buttons - Left side (Volume) */}
      <div className="absolute -left-[4px] top-32 flex flex-col gap-5">
        <div className="w-[4px] h-10 bg-gray-700 rounded-l-md flex items-center justify-center shadow-sm" aria-label="Volume up button">
          <Volume2 size={10} className="text-gray-600 opacity-0" />
        </div>
        <div className="w-[4px] h-10 bg-gray-700 rounded-l-md flex items-center justify-center shadow-sm" aria-label="Volume down button">
          <Volume1 size={10} className="text-gray-600 opacity-0" />
        </div>
      </div>
      
      {/* Phone buttons - Right side (Power) */}
      <div className="absolute -right-[4px] top-40">
        <div className="w-[4px] h-10 bg-gray-700 rounded-r-md flex items-center justify-center shadow-sm" aria-label="Power button">
          <Power size={10} className="text-gray-600 opacity-0" />
        </div>
      </div>
      
      {/* Enhanced notch with camera and sensors */}
      <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-28 h-8 bg-black rounded-b-lg z-20 flex items-center justify-center gap-2">
        <div className="w-2 h-2 rounded-full bg-gray-800 flex items-center justify-center">
          <div className="w-1 h-1 rounded-full bg-gray-700"></div>
        </div>
        <div className="w-8 h-1 rounded-full bg-gray-800"></div>
        <div className="w-2 h-2 rounded-full bg-gray-800 flex items-center justify-center">
          <div className="w-1 h-1 rounded-full bg-gray-700"></div>
        </div>
      </div>
      
      {/* Phone content */}
      <div 
        ref={contentContainerRef} 
        className="relative h-full w-full overflow-hidden rounded-3xl bg-white"
      >
        {/* Screen reflection effect */}
        <div 
          ref={screenReflectionRef}
          className="absolute inset-0 bg-gradient-to-tr from-transparent via-white/5 to-white/20 pointer-events-none z-10"
          style={{ 
            borderRadius: "inherit",
            opacity: 0.2
          }}
          aria-hidden="true"
        ></div>
        
        {/* Inner shadow for screen effect */}
        <div 
          className="absolute inset-0 shadow-inner pointer-events-none z-10"
          style={{ borderRadius: "inherit" }}
          aria-hidden="true"
        ></div>
        
        {sections.map((section, index) => (
          <div 
            key={index}
            ref={el => sectionRefs.current[index] = el}
            className="absolute inset-0 flex flex-col items-center p-8 opacity-0"
          >
            <h3 className="text-2xl font-semibold mb-3 text-center">{section.title}</h3>
            {section.description && (
              <p className="text-sm mb-4 text-center text-gray-600">{section.description}</p>
            )}
            <div className="flex-grow w-full flex items-center justify-center">
              {section.content}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PhoneMockup;
3. Scroll Animation Hook: useScrollSequence
This is the core of the animation logic:


import { useRef, useEffect, useState } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { ScrollSequenceSection } from "./types";

gsap.registerPlugin(ScrollTrigger);

interface ScrollSequenceRefs {
  containerRef: React.RefObject<HTMLDivElement>;
  bgRef: React.RefObject<HTMLDivElement>;
  titleRef: React.RefObject<HTMLDivElement>;
  phoneRef: React.RefObject<HTMLDivElement>;
  leftContainerRef: React.RefObject<HTMLDivElement>;
  rightContainerRef: React.RefObject<HTMLDivElement>;
  contentContainerRef: React.RefObject<HTMLDivElement>;
  sectionRefs: React.MutableRefObject<(HTMLDivElement | null)[]>;
}

export const useScrollSequence = (sections: ScrollSequenceSection[]) => {
  // Refs setup...
  const containerRef = useRef<HTMLDivElement>(null);
  const bgRef = useRef<HTMLDivElement>(null);
  // ... other refs

  // Reduced motion preference check
  const [prefersReducedMotion, setPrefersReducedMotion] = useState<boolean>(false);
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);
    // ... event listeners
  }, []);

  // Main animation setup
  useEffect(() => {
    if (prefersReducedMotion || !containerRef.current) return;

    // Clear existing ScrollTrigger instances
    const triggers = ScrollTrigger.getAll().filter(trigger => 
      trigger.vars.trigger === containerRef.current
    );
    triggers.forEach(trigger => trigger.kill());

    // Set up the main timeline with ScrollTrigger
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: containerRef.current,
        start: "top 25%",
        end: `bottom+=${sections.length * 60}% top`,
        pin: true,
        pinSpacing: true,
        scrub: 0.5,
        id: "scroll-sequence",
      }
    });

    // Animation sequences...
    // 1. Title animation
    // 2. Phone rotation
    // 3. Side container movements
    // 4. Section content animations (for each section)

    return () => {
      triggers.forEach(trigger => trigger.kill());
    };
  }, [sections, prefersReducedMotion]);

  const refs: ScrollSequenceRefs = { /* all refs */ };
  return { refs, prefersReducedMotion };
};
4. Type Definitions: types.ts

import { ReactNode } from "react";

export interface ScrollSequenceSection {
  title: string;
  description?: string;
  bgColor: string;
  content: ReactNode;
}

export interface ThriveScrollSequenceProps {
  title: string;
  subtitle?: string;
  sections: ScrollSequenceSection[];
  className?: string;
  showSideContainers?: boolean;
  centerPhone?: boolean;
}
How to Use the Component
Here's an example of how to use the ThriveScrollSequence component:


import React from 'react';
import ThriveScrollSequence, { ScrollSequenceSection } from '@/components/ui/thrive-scroll-sequence';
import { 
  PersonalizedAssessmentContent,
  TreatmentPlanContent,
  SupportContent
} from '@/components/ui/scroll-sequence/content';

const YourComponent = () => {
  // Define the sections to display in the phone
  const sections: ScrollSequenceSection[] = [
    {
      title: "Section 1 Title",
      description: "Brief description of section 1",
      bgColor: "rgba(245, 242, 255, 0.8)", // Background color that transitions
      content: <YourContent1Component /> // React component to render in the phone
    },
    {
      title: "Section 2 Title",
      description: "Brief description of section 2",
      bgColor: "rgba(152, 138, 213, 0.3)",
      content: <YourContent2Component />
    },
    // Add more sections as needed
  ];

  return (
    <section className="your-section-class">
      <ThriveScrollSequence
        title="Main Title for the Sequence"
        subtitle="Optional subtitle text"
        sections={sections}
        className="optional-additional-classes"
        centerPhone={true}
        showSideContainers={false}
      />
    </section>
  );
};

export default YourComponent;
Content Component Example
Here's an example of a content component that can be displayed inside the phone:


import React from 'react';
import { Card, CardContent } from '@/components/ui/card';

const ExampleContent = () => {
  return (
    <div className="w-full">
      <Card className="bg-thrive-purple/10 border-thrive-purple/30">
        <CardContent className="p-5 flex flex-col items-center">
          <div className="bg-thrive-purple/30 h-12 w-12 rounded-full flex items-center justify-center mb-4">
            {/* Icon or image */}
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-thrive-purple" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
          </div>
          <h4 className="font-medium text-center mb-3">Content Title</h4>
          {/* Your content here */}
          <div className="space-y-2 w-full">
            <div className="h-3 bg-thrive-purple/20 rounded-full w-full"></div>
            <div className="h-3 bg-thrive-purple/15 rounded-full w-3/4 mx-auto"></div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ExampleContent;
Key Features
Scroll-based Animation: Content changes as the user scrolls down the page
Phone Mockup UI: Realistic iPhone-style mockup with buttons and notch
Screen Transitions: Smooth animations between different screens/sections
Accessibility Support: Falls back to static content for users with reduced motion preference
Optional Side Elements: Can display decorative side panels for a richer UI
Background Color Transitions: Changes background color with each section
Performance Optimized: Uses hardware acceleration and cleanup functions
Dependencies
React
GSAP (with ScrollTrigger plugin)
Tailwind CSS
Lucide React (for icons)
ShadCN UI components (like Card)
Customization Options
Content: Customize each screen's content using React components
Colors: Change background colors for each section
Layout: Enable/disable side containers, center the phone
Height: Adjust container height through className prop
Animations: Modify timing and effects in useScrollSequence.tsx
This component is ideal for showcasing features, step-by-step processes, or app demonstrations in a visually engaging, interactive format.

To implement a phone scroll component in your project:

Create the necessary file structure:

src/components/ui/thrive-scroll-sequence.tsx (main component)
src/components/ui/scroll-sequence/PhoneMockup.tsx (phone UI)
src/components/ui/scroll-sequence/useScrollSequence.tsx (animation logic)
src/components/ui/scroll-sequence/types.ts (type definitions)
src/components/ui/scroll-sequence/SideContainers.tsx (optional side UI)
src/components/ui/scroll-sequence/StaticFallback.tsx (accessibility fallback)
src/components/ui/scroll-sequence/content/ (directory for content components)
Install dependencies:

GSAP for animations (already installed)
Lucide React for icons (already installed)
Create the files with the code examples provided

Create content components for each section you want to display

Use the component in your sections/pages as shown in the usage example

Test and adjust the animations, transitions, and styling as needed